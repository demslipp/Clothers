{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab_NLP_Группа 1_Кротов_Евгений",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/demslipp/Clothers/blob/master/Lab_NLP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kJ0Xn6U_pbdb",
        "colab_type": "text"
      },
      "source": [
        "В рамках данной лабораторной работы вам предлагается решить задачу регрессии работая с текстами: предсказать уровень заработной платы по используя текст.\n",
        "\n",
        "Подробнее о данных можно почитать на kaggle Данные можно скачать там же (Train_rev1.*) или по ссылке на яндекс диске yadisk_url\n",
        "\n",
        "Баллы за лабораторную будут выставляться по следующим блокам:\n",
        "\n",
        "Text preprocessing - 2 балла\n",
        "Text representation (bag of words, words frequency, tf-idf, LSA, W2V, Fasttext... Honor track: BERT, Elmo) - 3 балла\n",
        "Classical ML algorithms (Linear regression, SVM, ensembles of trees etc.) - 2 балла\n",
        "Neural networks: RNN (LSTM, GRU) + attention, Transformer - 3 балла\n",
        "Я рекомендую обратить внимания на kernel'ы соревнования, а так же на следующие ноутбуки: этот и этот\n",
        "\n",
        "Кто прикрутит сверточные нейросетки для этой задачи - получит +1 бонусный бал.\n",
        "\n",
        "Дедлайн - 22 марта 23:59\n",
        "\n",
        "Задача лабораторной - научиться работать с текстом. Постарайтесь подойти к выполнениею не формально, а так чтобы Вам самим было интересно и понравился результат ) Exploritary data analysis (картинки и графики) и Вашы выводы приветствуются. Для понижения размерности помимо прочих алгоритмов (PCA, SVD, TSNE etc.) попробуйте UMAP.\n",
        "\n",
        "Постарайтесь прокомментировать каждый блок пайплайна, сравнить различные алгоритмы, сделать выводы."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s-dt0Q7x-a_G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import*"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t188WJyP7ZDv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "grOr2qH-7bbd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "link = 'https://drive.google.com/open?id=17br_4807K9bpjxjWLHK4aR00pE1qtabC'\n",
        "fluff, id = link.split('=')\n",
        "\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_rev1.csv')  \n",
        "data = pd.read_csv('Train_rev1.csv')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZlznqmJn7fHY",
        "colab_type": "code",
        "outputId": "43c94fd6-bc82-4021-c496-ab094f5a735f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 901
        }
      },
      "source": [
        "data.shape\n",
        "data.head(10)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>Title</th>\n",
              "      <th>FullDescription</th>\n",
              "      <th>LocationRaw</th>\n",
              "      <th>LocationNormalized</th>\n",
              "      <th>ContractType</th>\n",
              "      <th>ContractTime</th>\n",
              "      <th>Company</th>\n",
              "      <th>Category</th>\n",
              "      <th>SalaryRaw</th>\n",
              "      <th>SalaryNormalized</th>\n",
              "      <th>SourceName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12612628</td>\n",
              "      <td>Engineering Systems Analyst</td>\n",
              "      <td>Engineering Systems Analyst Dorking Surrey Sal...</td>\n",
              "      <td>Dorking, Surrey, Surrey</td>\n",
              "      <td>Dorking</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>20000 - 30000/annum 20-30K</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12612830</td>\n",
              "      <td>Stress Engineer Glasgow</td>\n",
              "      <td>Stress Engineer Glasgow Salary **** to **** We...</td>\n",
              "      <td>Glasgow, Scotland, Scotland</td>\n",
              "      <td>Glasgow</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>25000 - 35000/annum 25-35K</td>\n",
              "      <td>30000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12612844</td>\n",
              "      <td>Modelling and simulation analyst</td>\n",
              "      <td>Mathematical Modeller / Simulation Analyst / O...</td>\n",
              "      <td>Hampshire, South East, South East</td>\n",
              "      <td>Hampshire</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>20000 - 40000/annum 20-40K</td>\n",
              "      <td>30000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12613049</td>\n",
              "      <td>Engineering Systems Analyst / Mathematical Mod...</td>\n",
              "      <td>Engineering Systems Analyst / Mathematical Mod...</td>\n",
              "      <td>Surrey, South East, South East</td>\n",
              "      <td>Surrey</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>25000 - 30000/annum 25K-30K negotiable</td>\n",
              "      <td>27500</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12613647</td>\n",
              "      <td>Pioneer, Miser Engineering Systems Analyst</td>\n",
              "      <td>Pioneer, Miser  Engineering Systems Analyst Do...</td>\n",
              "      <td>Surrey, South East, South East</td>\n",
              "      <td>Surrey</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>20000 - 30000/annum 20-30K</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>13179816</td>\n",
              "      <td>Engineering Systems Analyst Water Industry</td>\n",
              "      <td>Engineering Systems Analyst Water Industry Loc...</td>\n",
              "      <td>Dorking, Surrey, Surrey, Surrey</td>\n",
              "      <td>Dorking</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>20000 - 30000/annum 20K to 30K</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>14131336</td>\n",
              "      <td>Senior Subsea Pipeline Integrity Engineer</td>\n",
              "      <td>A globally renowned engineering and training c...</td>\n",
              "      <td>Aberdeen, Borders</td>\n",
              "      <td>UK</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Indigo 21 Ltd</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>50000 - 100000/annum</td>\n",
              "      <td>75000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>14663196</td>\n",
              "      <td>RECRUITMENT CONSULTANT  INDUSTRIAL / COMMERCIA...</td>\n",
              "      <td>THIS IS A LIVE VACANCY NOT A GENERIC ADVERTISE...</td>\n",
              "      <td>MANCHESTER, Greater Manchester</td>\n",
              "      <td>Manchester</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Code Blue Recruitment</td>\n",
              "      <td>HR &amp; Recruitment Jobs</td>\n",
              "      <td>18000 - 26000/annum TO 26K BASIC + COMM + BENS</td>\n",
              "      <td>22000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>14663197</td>\n",
              "      <td>RECRUITMENT CONSULTANT  CONSTRUCTION / TECHNIC...</td>\n",
              "      <td>This is an exceptional opportunity to join a c...</td>\n",
              "      <td>LEEDS, West Yorkshire</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Code Blue Recruitment</td>\n",
              "      <td>HR &amp; Recruitment Jobs</td>\n",
              "      <td>18000 - 28000/annum 18 - 28K BASIC + COMM + BENS</td>\n",
              "      <td>23000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>15395797</td>\n",
              "      <td>Subsea Cables Engineer</td>\n",
              "      <td>A subsea engineering company is looking for an...</td>\n",
              "      <td>Aberdeen, UK</td>\n",
              "      <td>Aberdeen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Indigo 21 Ltd</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>70000 - 100000/annum</td>\n",
              "      <td>85000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Id  ...        SourceName\n",
              "0  12612628  ...  cv-library.co.uk\n",
              "1  12612830  ...  cv-library.co.uk\n",
              "2  12612844  ...  cv-library.co.uk\n",
              "3  12613049  ...  cv-library.co.uk\n",
              "4  12613647  ...  cv-library.co.uk\n",
              "5  13179816  ...  cv-library.co.uk\n",
              "6  14131336  ...  cv-library.co.uk\n",
              "7  14663196  ...  cv-library.co.uk\n",
              "8  14663197  ...  cv-library.co.uk\n",
              "9  15395797  ...  cv-library.co.uk\n",
              "\n",
              "[10 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SeSFjzX3AxVc",
        "colab_type": "text"
      },
      "source": [
        "удалим тип контракта, поскольку в большинстве случаев данные равны NaN, получается, что он особенной роли не играет.Поступим аналогично с SalaryRow, ибо есть SalaryNormalized, как и другие параметры Raw, они являются избыточными. Id тоже не несет для нас никакой смысловой нагрузки\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-jLj1qwsDjEG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data.drop([\"ContractType\"],axis=1, inplace=True)\n",
        "data.drop([\"SalaryRaw\"],axis=1, inplace=True)\n",
        "data.drop([\"Id\"],axis=1, inplace=True)\n",
        "data.drop([\"LocationRaw\"],axis=1, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EK74tnevAP_d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data['Title'] = data['Title'].astype(str)\n",
        "data['FullDescription'] = data['FullDescription'].astype(str)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EDMbPWipAT00",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "text_columns = [\"Title\", \"FullDescription\"]\n",
        "categorical_columns = [\"Category\", \"Company\", \"LocationNormalized\", \"ContractType\", \"ContractTime\"]\n",
        "target_column = \"SalaryNormalized\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o9vQzUgGAVm2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2xhzCKl_9ZQS",
        "colab_type": "code",
        "outputId": "f09829e4-bb5d-41e9-b938-1d553642bec8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "import re\n",
        "import string \n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS\n",
        "from nltk.stem import PorterStemmer"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vXOsdapdVcHx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "df = data.drop(\"FullDescription\",axis=1)\n",
        "le = LabelEncoder()\n",
        "df.LocationNormalized = le.fit_transform(df.LocationNormalized)\n",
        "df.Category = le.fit_transform(df.Category)\n",
        "df.Company = le.fit_transform(df.Company.astype(str))\n",
        "df = df.drop(\"Title\",axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CfLfh7sIVmLr",
        "colab_type": "text"
      },
      "source": [
        "Тут я убираю все потенциально опасный мусор, который мог бы попасться, ибо датабейс огромный, вдруг что-то затесалось. В ходе обработки было принято решение проверять на Null, ибо как минимум 1 запись содержала Null в FullDescription. Плюс длину слов тоже будем проверять, ибо есть часто всякие наборы символов, которые не имеют ничего полезного для анализа\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwL5w93D0ckM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data=data.dropna(axis = 0, how ='any')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oU0rpVZvCbl9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data['Title'] = data['Title'].str.lower()\n",
        "data['FullDescription'] = data['FullDescription'].str.lower()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DWDh_KW8ViR3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data['FullDescription'] = data['FullDescription'].apply(standardize_text)\n",
        "data['Title'] = data['Title'].apply(standardize_text)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gmiO6Ou8Rrsg",
        "colab_type": "code",
        "outputId": "546a2a77-0741-4f0c-f5cc-c75f41da9a06",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        }
      },
      "source": [
        "data.head(10)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>FullDescription</th>\n",
              "      <th>LocationNormalized</th>\n",
              "      <th>ContractTime</th>\n",
              "      <th>Company</th>\n",
              "      <th>Category</th>\n",
              "      <th>SalaryNormalized</th>\n",
              "      <th>SourceName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>engineering systems analyst</td>\n",
              "      <td>engineering systems analyst dorking surrey sal...</td>\n",
              "      <td>Dorking</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>stress engineer glasgow</td>\n",
              "      <td>stress engineer glasgow salary  to  we re curr...</td>\n",
              "      <td>Glasgow</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>30000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>modelling and simulation analyst</td>\n",
              "      <td>mathematical modeller  simulation analyst  ope...</td>\n",
              "      <td>Hampshire</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>30000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>engineering systems analyst  mathematical mode...</td>\n",
              "      <td>engineering systems analyst  mathematical mode...</td>\n",
              "      <td>Surrey</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>27500</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>pioneer miser engineering systems analyst</td>\n",
              "      <td>pioneer miser  engineering systems analyst dor...</td>\n",
              "      <td>Surrey</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>engineering systems analyst water industry</td>\n",
              "      <td>engineering systems analyst water industry loc...</td>\n",
              "      <td>Dorking</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Gregory Martin International</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>25000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>senior subsea pipeline integrity engineer</td>\n",
              "      <td>a globally renowned engineering and training c...</td>\n",
              "      <td>UK</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Indigo 21 Ltd</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>75000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>recruitment consultant  industrial  commercial...</td>\n",
              "      <td>this is a live vacancy not a generic advertise...</td>\n",
              "      <td>Manchester</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Code Blue Recruitment</td>\n",
              "      <td>HR &amp; Recruitment Jobs</td>\n",
              "      <td>22000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>recruitment consultant  construction  technica...</td>\n",
              "      <td>this is an exceptional opportunity to join a c...</td>\n",
              "      <td>Leeds</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Code Blue Recruitment</td>\n",
              "      <td>HR &amp; Recruitment Jobs</td>\n",
              "      <td>23000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>subsea cables engineer</td>\n",
              "      <td>a subsea engineering company is looking for an...</td>\n",
              "      <td>Aberdeen</td>\n",
              "      <td>permanent</td>\n",
              "      <td>Indigo 21 Ltd</td>\n",
              "      <td>Engineering Jobs</td>\n",
              "      <td>85000</td>\n",
              "      <td>cv-library.co.uk</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Title  ...        SourceName\n",
              "0                        engineering systems analyst  ...  cv-library.co.uk\n",
              "1                            stress engineer glasgow  ...  cv-library.co.uk\n",
              "2                   modelling and simulation analyst  ...  cv-library.co.uk\n",
              "3  engineering systems analyst  mathematical mode...  ...  cv-library.co.uk\n",
              "4          pioneer miser engineering systems analyst  ...  cv-library.co.uk\n",
              "5         engineering systems analyst water industry  ...  cv-library.co.uk\n",
              "6          senior subsea pipeline integrity engineer  ...  cv-library.co.uk\n",
              "7  recruitment consultant  industrial  commercial...  ...  cv-library.co.uk\n",
              "8  recruitment consultant  construction  technica...  ...  cv-library.co.uk\n",
              "9                             subsea cables engineer  ...  cv-library.co.uk\n",
              "\n",
              "[10 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5QJ0Lzvvf6dH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import nltk\n",
        "import string\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gMLYRZ_-Dqjy",
        "colab_type": "text"
      },
      "source": [
        "Сделаем стемминг, лемматизация просто плавит мою машину, даже гугл колаб падает, поэтому только стемминг. И даже он иногда роняет колаб\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9aVpnkUhUqdH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data1=data\n",
        "data1['Title'] = data['Title'].apply(tokenize)\n",
        "data1['FullDescription'] = data['FullDescription'].apply(tokenize)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oaa1Nxh4gL4k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data1.head()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8YEqnf99FG1W",
        "colab_type": "text"
      },
      "source": [
        "На этом предобработку, думаю, можно и закончить. Начнем репрезентацию"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nlRR33FOFVoN",
        "colab_type": "text"
      },
      "source": [
        "Word Frequency\n",
        "\n",
        "\n",
        "Создадим хранилище слов, у каждого будет свой признак. Заодно подсчитаем количество вхождений. Использовать будем словарь\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aSh-x4SJglVE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "storage=dict()\n",
        "\n",
        "for i in data['FullDescription']:\n",
        "  for word in i:\n",
        "    if word not in storage.keys():\n",
        "      storage[word]=1\n",
        "    else:\n",
        "      storage[word]=storage[word]+1\n",
        "\n",
        "for i in data['Title']:\n",
        "  for word in i:\n",
        "    if word not in storage.keys():\n",
        "      storage[word]=1 \n",
        "    else:\n",
        "      storage[word]=storage[word]+1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XEftYGkMG2ua",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9HOCj8JK2CV1",
        "colab_type": "text"
      },
      "source": [
        "выведем слова и их частоту встречаемости"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mj9F-vkeCPWm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cv = CountVectorizer(storage,binary=True)\n",
        "count_vector=cv.fit_transform(storage)\n",
        "print( cv.fit_transform(storage).todense() )\n",
        "print( cv.vocabulary_ )"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6-FWd0VugNOw",
        "colab_type": "text"
      },
      "source": [
        "Получили список всех слов и частоту их встречаемости\n",
        "\n",
        "Теперь делаем TF-IDF\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "td4GnzYsIUSL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.decomposition import TruncatedSVD"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uzU2h8feVzAF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data['FullDescription'] = data['FullDescription'].apply(lambda s: ' '.join(s))\n",
        "data['Title'] = data['Title'].apply(lambda s: ' '.join(s))\n",
        "data.head(10)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4oeQ1bn3jRWf",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "Поделим сразу весь датасет пополам, чтобы не билдить все по миллиону лет"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BYvWVlLmjB1W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "top_data = data.copy()\n",
        "top_data['FullDescription'] = data['FullDescription'].apply(lambda s: ' '.join([i for i in s.split(' ') if (storage.get(i) != None) and (storage.get(i) >= 50)]))\n",
        "top_data['Title'] = data['Title'].apply(lambda s: ' '.join([i for i in str(s).split(' ') if (storage.get(i) != None) and (storage.get(i) >= 50)]))\n",
        "truncated_data=top_data[::2]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "37fm4EE_-tM9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.feature_extraction import DictVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eQpfDDk09UK-",
        "colab_type": "text"
      },
      "source": [
        "Bag of words & TF-IDF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BTHgIvgCd3qS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vectorizer = CountVectorizer(binary=True)\n",
        "\n",
        "bow_fd = vectorizer.fit_transform(truncated_data['FullDescription']) \n",
        "bow_t = vectorizer.fit_transform(truncated_data['Title']) \n",
        "\n",
        "X_tf_idf_fd = vectorizer.fit_transform(truncated_data['FullDescription'])\n",
        "X_tf_idf_t = vectorizer.fit_transform(truncated_data['Title'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xoAj8DtaetOD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "enc = DictVectorizer()\n",
        "categories = enc.fit_transform(truncated_data[['LocationNormalized', 'Company', 'ContractTime', 'Category', 'SourceName']].to_dict('records'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S95Ozk12eLZH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from scipy.sparse import hstack\n",
        "vector_bow= hstack([bow_t,bow_fd, categories])\n",
        "vector_tfidf = hstack([X_tf_idf_t,X_tf_idf_fd,categories])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bVw2lqNbgE_O",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train1, X_test1, labels_train1, labels_test1 = train_test_split(\n",
        "    vector_bow, \n",
        "    truncated_data[\"SalaryNormalized\"],\n",
        "    test_size=0.33, \n",
        "    random_state=1\n",
        ")\n",
        "\n",
        "X_train2, X_test2, labels_train2, labels_test2 = train_test_split(\n",
        "    vector_tfidf, \n",
        "    truncated_data[\"SalaryNormalized\"],\n",
        "    test_size=0.33, \n",
        "    random_state=1\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tYUQQ7F5JlpS",
        "colab_type": "text"
      },
      "source": [
        "РЕГРЕССИИ\n",
        "\n",
        "Линейная\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pErhe8ceB4GJ",
        "colab_type": "text"
      },
      "source": [
        "bow\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nLvZl7quD8Xe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.feature_extraction import DictVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "#truncated_data = data[::2]\n",
        "enc = DictVectorizer()\n",
        "trunc_data = enc.fit_transform(data[['LocationNormalized', 'Company', 'ContractTime', 'Category', 'SourceName']].to_dict('records'))\n",
        "clf = LogisticRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "poUI6451ua2E",
        "colab_type": "text"
      },
      "source": [
        "Напишем функцию для графиков и для вывода метрик"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_K0VAzE5rpMB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def print_metrics(test_labels, prediction, plots=True):\n",
        "  if plots:\n",
        "    plt.plot(prediction[1:100], 'r-',label='Predicted')\n",
        "    plt.plot(test_labels[1:100].values, 'b-', label='Correct')\n",
        "    plt.xlabel(\"Real observations\")\n",
        "    plt.legend(loc='best')\n",
        "    plt.show()\n",
        "\n",
        "    MSE=metrics.mean_squared_error(y_pred=prediction,y_true=test_labels)\n",
        "    RMSE=np.sqrt(MSE)\n",
        "    MAE=metrics.mean_absolute_error(y_pred=prediction,y_true=test_labels)\n",
        "    R2=metrics.r2_score(y_pred=prediction,y_true=test_labels)\n",
        "    print('MSE: ', MSE)\n",
        "    print('RMSE: ',RMSE)\n",
        "    print('MAE: ', MAE)\n",
        "    print('R2: ', R2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aJNKun1NMxe8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "lmodel = LinearRegression()\n",
        "lmodel.fit(X_train1, labels_train1)\n",
        "prediction1 = lmodel.predict(X_test1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mi9KI9aZB7m0",
        "colab_type": "text"
      },
      "source": [
        "TF-IDF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dhMJfEH1CAJQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "lmodel = LinearRegression()\n",
        "lmodel.fit(X_train2, labels_train2)\n",
        "prediction2 = lmodel.predict(X_test2)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YIYRGbSSrpGX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "from sklearn import metrics\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jrl2osXrrpnS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print_metrics(labels_test1, prediction1)\n",
        "print_metrics(labels_test2, prediction2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nGgUqL6aeh7v",
        "colab_type": "text"
      },
      "source": [
        "Лассо"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ndGcXSmCNzAI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "lasso=linear_model.Lasso()\n",
        "lasso.fit(X_train1, labels_train1)\n",
        "lasso_pred1=lasso.predict(X_test1)\n",
        "\n",
        "lasso=linear_model.Lasso()\n",
        "lasso.fit(X_train2, labels_train2)\n",
        "lasso_pred1=lasso.predict(X_test2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yIs7wQ7dNzi_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print_metrics(labels_test1, lasso_pred1)\n",
        "print_metrics(labels_test2, lasso_pred2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JUPde30dflFb",
        "colab_type": "text"
      },
      "source": [
        "Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K6YmZfJ_Nzn7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "exnFJGjsNztH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "rdr = RandomForestRegressor()\n",
        "rdr.fit(X_train1, labels_train1)\n",
        "rdr_pred1 = rfr.predict(X_test2)\n",
        "\n",
        "rdr = RandomForestRegressor()\n",
        "rdr.fit(X_train1, labels_train1)\n",
        "rdr_pred2 = rfr.predict(X_test2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7EJRNhZ6Nzwg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print_metrics(labels_test1, rdr_pred1)\n",
        "print_metrics(labels_test2, rdr_pred2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6WD4NImp3g3t",
        "colab_type": "text"
      },
      "source": [
        "Попробуем кэт буст, не думаю, что выйдет что-то хорошее, но почему бы и нет, посмотрим"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hl2VCeO99XRN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pip install catboost"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1PJ1QKuV28lT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "from catboost import CatBoostRegressor\n",
        "\n",
        "cat = CatBoostRegressor()\n",
        "cat.fit(X_train1, labels_train1, silent=True)\n",
        "cat_pred1 = cat.predict(X_test1)\n",
        "\n",
        "cat.fit(X_train2, labels_train2, silent=True)\n",
        "cat_pred2 = cat.predict(X_test2)\n",
        "\n",
        "metric(labels_test1, cat_pred1)\n",
        "metric(labels_test2, cat_pred2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KXpwB-2SCAxa",
        "colab_type": "text"
      },
      "source": [
        "К сожалению, что-то покрашилось еще до того, как я стал писать комментарии, но я попробую еще днем разок пересобрать это, тогда, быть может, и будет чуть более наглядно\n",
        "\n",
        "Перейдем к нейронкам"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RYyBIuFLDINV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!pip install tensorflow-gpu==2.0.0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y2rhkRvZC5s9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow import optimizers\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation, Dropout\n",
        "from tensorflow.keras import utils"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TVoNBfmVFGvx",
        "colab_type": "text"
      },
      "source": [
        "Пилить их пришлось почти вслепую. благо есть подспорье в лице одной из предыдущих лаб"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LtuWz_VuNzqc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model1 = Sequential()\n",
        "model1.add(Dense(500, input_dim = 784, activation=\"relu\"))\n",
        "model1.add(Dense(500, input_dim = 784, activation=\"relu\"))\n",
        "model1.add(Dense(10, activation=\"linear\"))\n",
        "\n",
        "model1.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=[\"accuracy\"])\n",
        "model1.fit(X_train1,labels_train1, epochs=10, batch_size=100)\n",
        "\n",
        "mod1_loss, mod1_accur = model1.evaluate(X_test1, labels_test1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yKiWbhq9NzmI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(\"Accuracy 1: {}\".format(mod1_accur))\n",
        "print(\"Loss 1: {}\".format(mod1_loss))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KcZIM9fnNywI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model2 = Sequential()\n",
        "model2.add(Dense(500, input_dim = 784, activation=\"relu\"))\n",
        "model2.add(Dense(500, input_dim = 784, activation=\"relu\"))\n",
        "model2.add(Dense(10, activation=\"linear\"))\n",
        "\n",
        "model2.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=[\"accuracy\"])\n",
        "model2.fit(X_train2,labels_train2, epochs=10, batch_size=100)\n",
        "\n",
        "mod2_loss, mod2_accur = model2.evaluate(X_test2, labels_test2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aVIYBgl7Byyr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(\"Accuracy 2: {}\".format(mod2_accur))\n",
        "print(\"Loss 2: {}\".format(mod2_loss))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "toMdfC0rKRNg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dCP5psmXG3q7",
        "colab_type": "text"
      },
      "source": [
        "ВЫВОД: Во время выполнения лабораторной работы мною были получены бесценный опыт по обработке текста и немножко седых волос на голове из-за работы этого сервиса. К сожалению, проект не собран до конца, ибо почему-то проект рестартится при стемминге. Надеюсь, днем ситуация с сервером будет чуть лучше, и мне удастся собрать его и продемонстрировать в лучшем виде. Было довольно интересно столкунться с чем-то для себя новым. Не принципиально новым, но все же. Такой формат задания оказался довольно занимательным, но хотелось бы чуть больше конкретики в подобных заданиях, хотя, может быть, это только мое мнение, которое утонет в неодобрительных возгласах большинства"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hddYax2sB5Sg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O7g-dxWHCEp6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}